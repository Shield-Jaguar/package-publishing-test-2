/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ProblemDetailsError } from '../errors/problemDetailsError';
import {
  ValidationProblemDetailsError,
} from '../errors/validationProblemDetailsError';
import {
  PublishingProfileCreateCommand,
  publishingProfileCreateCommandSchema,
} from '../models/publishingProfileCreateCommand';
import {
  PublishingProfileItem,
  publishingProfileItemSchema,
} from '../models/publishingProfileItem';
import {
  PublishingProfileUpdateCommand,
  publishingProfileUpdateCommandSchema,
} from '../models/publishingProfileUpdateCommand';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PublishingProfileController extends BaseController {
  /**
   * @return Response from the API call
   */
  async apiPublishingProfileGET(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishingProfileItem[]>> {
    const req = this.createRequest('GET', '/api/publishing-profile');
    return req.callAsJson(array(publishingProfileItemSchema), requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfilePOST(
    body?: PublishingProfileCreateCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishingProfileItem>> {
    const req = this.createRequest('POST', '/api/publishing-profile');
    const mapped = req.prepareArgs({
      body: [body, optional(publishingProfileCreateCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(publishingProfileItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiPublishingProfileByIdGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishingProfileItem>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(publishingProfileItemSchema, requestOptions);
  }

  /**
   * @param id
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileByIdPUT(
    id: string,
    body?: PublishingProfileUpdateCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(publishingProfileUpdateCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiPublishingProfileByIdDELETE(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }
}
