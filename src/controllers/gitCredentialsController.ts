/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ProblemDetailsError } from '../errors/problemDetailsError';
import {
  ValidationProblemDetailsError,
} from '../errors/validationProblemDetailsError';
import {
  CredentialsGitUpdateProfileCommand,
  credentialsGitUpdateProfileCommandSchema,
} from '../models/credentialsGitUpdateProfileCommand';
import {
  CredentialsGitUpsertCommand,
  credentialsGitUpsertCommandSchema,
} from '../models/credentialsGitUpsertCommand';
import {
  GitCredentialsItem,
  gitCredentialsItemSchema,
} from '../models/gitCredentialsItem';
import { array, dict, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class GitCredentialsController extends BaseController {
  /**
   * @return Response from the API call
   */
  async apiCredentialsGitGET(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GitCredentialsItem[]>> {
    const req = this.createRequest('GET', '/api/credentials/git');
    return req.callAsJson(array(gitCredentialsItemSchema), requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async apiCredentialsGitPOST(
    body?: CredentialsGitUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GitCredentialsItem>> {
    const req = this.createRequest('POST', '/api/credentials/git');
    const mapped = req.prepareArgs({
      body: [body, optional(credentialsGitUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(gitCredentialsItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsGitByIdGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GitCredentialsItem>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/git/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(gitCredentialsItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsGitByIdDELETE(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/git/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param id
   * @param body
   * @return Response from the API call
   */
  async apiCredentialsGitByIdPATCH(
    id: string,
    body?: CredentialsGitUpdateProfileCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(credentialsGitUpdateProfileCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/credentials/git/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param provider
   * @return Response from the API call
   */
  async apiCredentialsGitOAuthUrlByProviderGET(
    provider: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ provider: [provider, string()] });
    req.appendTemplatePath`/api/credentials/git/OAuthUrl/${mapped.provider}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsText(requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsGitPublishingProfileByIdGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Record<string, unknown>>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/git/${mapped.id}/publishing-profile`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(dict(unknown()), requestOptions);
  }
}
