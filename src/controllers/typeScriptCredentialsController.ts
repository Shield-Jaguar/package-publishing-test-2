/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ProblemDetailsError } from '../errors/problemDetailsError';
import {
  ValidationProblemDetailsError,
} from '../errors/validationProblemDetailsError';
import {
  CredentialsTypeScriptUpdateProfileCommand,
  credentialsTypeScriptUpdateProfileCommandSchema,
} from '../models/credentialsTypeScriptUpdateProfileCommand';
import {
  CredentialsTypeScriptUpsertCommand,
  credentialsTypeScriptUpsertCommandSchema,
} from '../models/credentialsTypeScriptUpsertCommand';
import {
  TypeScriptCredentialsItem,
  typeScriptCredentialsItemSchema,
} from '../models/typeScriptCredentialsItem';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class TypeScriptCredentialsController extends BaseController {
  /**
   * @return Response from the API call
   */
  async apiCredentialsTypescriptGET(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TypeScriptCredentialsItem[]>> {
    const req = this.createRequest('GET', '/api/credentials/typescript');
    return req.callAsJson(
      array(typeScriptCredentialsItemSchema),
      requestOptions
    );
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async apiCredentialsTypescriptPOST(
    body?: CredentialsTypeScriptUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TypeScriptCredentialsItem>> {
    const req = this.createRequest('POST', '/api/credentials/typescript');
    const mapped = req.prepareArgs({
      body: [body, optional(credentialsTypeScriptUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(typeScriptCredentialsItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsTypescriptByIdGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TypeScriptCredentialsItem>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/typescript/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(typeScriptCredentialsItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsTypescriptByIdDELETE(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/typescript/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param id
   * @param body
   * @return Response from the API call
   */
  async apiCredentialsTypescriptByIdPATCH(
    id: string,
    body?: CredentialsTypeScriptUpdateProfileCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(credentialsTypeScriptUpdateProfileCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/credentials/typescript/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsTypescriptPublishingProfileGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/typescript/${mapped.id}/publishing-profile`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(array(string()), requestOptions);
  }
}
