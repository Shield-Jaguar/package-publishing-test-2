/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ProblemDetailsError } from '../errors/problemDetailsError';
import {
  ValidationProblemDetailsError,
} from '../errors/validationProblemDetailsError';
import {
  ConfigurationsCSharpUpsertCommand,
  configurationsCSharpUpsertCommandSchema,
} from '../models/configurationsCSharpUpsertCommand';
import {
  ConfigurationsGitUpsertCommand,
  configurationsGitUpsertCommandSchema,
} from '../models/configurationsGitUpsertCommand';
import {
  ConfigurationsGoUpsertCommand,
  configurationsGoUpsertCommandSchema,
} from '../models/configurationsGoUpsertCommand';
import {
  ConfigurationsJavaUpsertCommand,
  configurationsJavaUpsertCommandSchema,
} from '../models/configurationsJavaUpsertCommand';
import {
  ConfigurationsPhpUpsertCommand,
  configurationsPhpUpsertCommandSchema,
} from '../models/configurationsPhpUpsertCommand';
import {
  ConfigurationsPythonUpsertCommand,
  configurationsPythonUpsertCommandSchema,
} from '../models/configurationsPythonUpsertCommand';
import {
  ConfigurationsRubyUpsertCommand,
  configurationsRubyUpsertCommandSchema,
} from '../models/configurationsRubyUpsertCommand';
import {
  ConfigurationsSwiftUpsertCommand,
  configurationsSwiftUpsertCommandSchema,
} from '../models/configurationsSwiftUpsertCommand';
import {
  ConfigurationsTypeScriptUpsertCommand,
  configurationsTypeScriptUpsertCommandSchema,
} from '../models/configurationsTypeScriptUpsertCommand';
import { LanguageEnum, languageEnumSchema } from '../models/languageEnum';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class PublishingProfileConfigurationController extends BaseController {
  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileCsharpByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsCSharpUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsCSharpUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/csharp`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfileCsharpDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/csharp/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param language
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileGitByProfileIdPOST(
    profileId: string,
    language: LanguageEnum,
    body?: ConfigurationsGitUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      language: [language, languageEnumSchema],
      body: [body, optional(configurationsGitUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/git/${mapped.language}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param language
   * @return Response from the API call
   */
  async apiPublishingProfileGitDisablePATCH(
    profileId: string,
    language: LanguageEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      language: [language, languageEnumSchema],
    });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/git/${mapped.language}/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileGoByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsGoUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsGoUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/go`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfileGoDisableByProfileIdPATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/go/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileJavaByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsJavaUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsJavaUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/java`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfileJavaDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/java/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfilePhpByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsPhpUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsPhpUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/php`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfilePhpDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/php/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfilePythonByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsPythonUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsPythonUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/python`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfilePythonDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/python/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileRubyByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsRubyUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsRubyUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/ruby`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfileRubyDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/ruby/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileSwiftByProfileIdPOST(
    profileId: string,
    body?: ConfigurationsSwiftUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsSwiftUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/swift`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfileSwiftDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/swift/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @param body
   * @return Response from the API call
   */
  async apiPublishingProfileTypescriptPOST(
    profileId: string,
    body?: ConfigurationsTypeScriptUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      profileId: [profileId, string()],
      body: [body, optional(configurationsTypeScriptUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/typescript`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param profileId
   * @return Response from the API call
   */
  async apiPublishingProfileTypescriptDisablePATCH(
    profileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ profileId: [profileId, string()] });
    req.appendTemplatePath`/api/publishing-profile/${mapped.profileId}/typescript/disable`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }
}
