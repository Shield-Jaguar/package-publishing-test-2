/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ProblemDetailsError } from '../errors/problemDetailsError';
import {
  ValidationProblemDetailsError,
} from '../errors/validationProblemDetailsError';
import {
  CredentialsPhpUpdateProfileCommand,
  credentialsPhpUpdateProfileCommandSchema,
} from '../models/credentialsPhpUpdateProfileCommand';
import {
  CredentialsPhpUpsertCommand,
  credentialsPhpUpsertCommandSchema,
} from '../models/credentialsPhpUpsertCommand';
import {
  PhpCredentialsItem,
  phpCredentialsItemSchema,
} from '../models/phpCredentialsItem';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PhpCredentialsController extends BaseController {
  /**
   * @return Response from the API call
   */
  async apiCredentialsPhpGET(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PhpCredentialsItem[]>> {
    const req = this.createRequest('GET', '/api/credentials/php');
    return req.callAsJson(array(phpCredentialsItemSchema), requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async apiCredentialsPhpPOST(
    body?: CredentialsPhpUpsertCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PhpCredentialsItem>> {
    const req = this.createRequest('POST', '/api/credentials/php');
    const mapped = req.prepareArgs({
      body: [body, optional(credentialsPhpUpsertCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(phpCredentialsItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsPhpByIdGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PhpCredentialsItem>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/php/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(phpCredentialsItemSchema, requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsPhpByIdDELETE(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/php/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param id
   * @param body
   * @return Response from the API call
   */
  async apiCredentialsPhpByIdPATCH(
    id: string,
    body?: CredentialsPhpUpdateProfileCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(credentialsPhpUpdateProfileCommandSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/credentials/php/${mapped.id}`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.call(requestOptions);
  }

  /**
   * @param id
   * @return Response from the API call
   */
  async apiCredentialsPhpPublishingProfileByIdGET(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/credentials/php/${mapped.id}/publishing-profile`;
    req.throwOn(400, ValidationProblemDetailsError, 'Bad Request');
    req.throwOn(404, ProblemDetailsError, 'Not Found');
    req.defaultToError(ProblemDetailsError);
    return req.callAsJson(array(string()), requestOptions);
  }
}
