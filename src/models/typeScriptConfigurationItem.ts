/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  nullable,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  ConfigurationsTypeScriptCommonTsBugsDto,
  configurationsTypeScriptCommonTsBugsDtoSchema,
} from './configurationsTypeScriptCommonTsBugsDto';
import {
  ConfigurationsTypeScriptCommonTsPersonDto,
  configurationsTypeScriptCommonTsPersonDtoSchema,
} from './configurationsTypeScriptCommonTsPersonDto';
import {
  ConfigurationsTypeScriptCommonTsRepositoryDto,
  configurationsTypeScriptCommonTsRepositoryDtoSchema,
} from './configurationsTypeScriptCommonTsRepositoryDto';

export interface TypeScriptConfigurationItem {
  isEnabled?: boolean;
  credentialsId?: string;
  name?: string;
  author?: ConfigurationsTypeScriptCommonTsPersonDto;
  description?: string | null;
  contributors?: ConfigurationsTypeScriptCommonTsPersonDto[];
  bugs?: ConfigurationsTypeScriptCommonTsBugsDto;
  keywords?: string[];
  homepage?: string | null;
  license?: string | null;
  repository?: ConfigurationsTypeScriptCommonTsRepositoryDto;
}

export const typeScriptConfigurationItemSchema: Schema<TypeScriptConfigurationItem> = object(
  {
    isEnabled: ['isEnabled', optional(boolean())],
    credentialsId: ['credentialsId', optional(string())],
    name: ['name', optional(string())],
    author: [
      'author',
      optional(lazy(() => configurationsTypeScriptCommonTsPersonDtoSchema)),
    ],
    description: ['description', optional(nullable(string()))],
    contributors: [
      'contributors',
      optional(
        array(lazy(() => configurationsTypeScriptCommonTsPersonDtoSchema))
      ),
    ],
    bugs: [
      'bugs',
      optional(lazy(() => configurationsTypeScriptCommonTsBugsDtoSchema)),
    ],
    keywords: ['keywords', optional(array(string()))],
    homepage: ['homepage', optional(nullable(string()))],
    license: ['license', optional(nullable(string()))],
    repository: [
      'repository',
      optional(lazy(() => configurationsTypeScriptCommonTsRepositoryDtoSchema)),
    ],
  }
);
