/**
 * PackagePublishing.WebLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  ConfigurationsJavaCommonJavaDeveloperDto,
  configurationsJavaCommonJavaDeveloperDtoSchema,
} from './configurationsJavaCommonJavaDeveloperDto';
import {
  ConfigurationsJavaCommonJavaDistributionManagementDto,
  configurationsJavaCommonJavaDistributionManagementDtoSchema,
} from './configurationsJavaCommonJavaDistributionManagementDto';
import {
  ConfigurationsJavaCommonJavaLicenseDto,
  configurationsJavaCommonJavaLicenseDtoSchema,
} from './configurationsJavaCommonJavaLicenseDto';
import {
  ConfigurationsJavaCommonJavaScmDto,
  configurationsJavaCommonJavaScmDtoSchema,
} from './configurationsJavaCommonJavaScmDto';

export interface JavaConfigurationItem {
  isEnabled?: boolean;
  credentialsId?: string;
  groupId?: string;
  artifactId?: string;
  name?: string;
  description?: string;
  url?: string;
  developers?: ConfigurationsJavaCommonJavaDeveloperDto[];
  distributionManagement?: ConfigurationsJavaCommonJavaDistributionManagementDto;
  scm?: ConfigurationsJavaCommonJavaScmDto;
  licenses?: ConfigurationsJavaCommonJavaLicenseDto[];
}

export const javaConfigurationItemSchema: Schema<JavaConfigurationItem> = object(
  {
    isEnabled: ['isEnabled', optional(boolean())],
    credentialsId: ['credentialsId', optional(string())],
    groupId: ['groupId', optional(string())],
    artifactId: ['artifactId', optional(string())],
    name: ['name', optional(string())],
    description: ['description', optional(string())],
    url: ['url', optional(string())],
    developers: [
      'developers',
      optional(
        array(lazy(() => configurationsJavaCommonJavaDeveloperDtoSchema))
      ),
    ],
    distributionManagement: [
      'distributionManagement',
      optional(
        lazy(() => configurationsJavaCommonJavaDistributionManagementDtoSchema)
      ),
    ],
    scm: [
      'scm',
      optional(lazy(() => configurationsJavaCommonJavaScmDtoSchema)),
    ],
    licenses: [
      'licenses',
      optional(array(lazy(() => configurationsJavaCommonJavaLicenseDtoSchema))),
    ],
  }
);
